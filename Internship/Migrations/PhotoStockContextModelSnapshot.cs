// <auto-generated />
using System;
using Internship.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Internship.Migrations
{
    [DbContext(typeof(PhotoStockContext))]
    partial class PhotoStockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Internship.Domain.Entity.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("date")
                        .HasColumnName("DateOfRegistration");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("14d5363b-0889-4b3d-aaa7-f456d7b0f195"),
                            DateOfBirth = new DateTime(1994, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Andrew",
                            LastName = "Ivanov",
                            NickName = "Pushkin"
                        },
                        new
                        {
                            Id = new Guid("f51cccd8-4c11-4c96-aff3-24b1b4922de7"),
                            DateOfBirth = new DateTime(1975, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jhon",
                            LastName = "Simons",
                            NickName = "Simon"
                        },
                        new
                        {
                            Id = new Guid("1395039e-c3d8-4afb-811e-6a69ab3245bd"),
                            DateOfBirth = new DateTime(1995, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2021, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mike",
                            LastName = "Luis",
                            NickName = "Lu"
                        },
                        new
                        {
                            Id = new Guid("ac898bde-ecc6-43c1-8f4b-a0d54dc17d47"),
                            DateOfBirth = new DateTime(1989, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2020, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Piter",
                            LastName = "Brown",
                            NickName = "Pity"
                        },
                        new
                        {
                            Id = new Guid("b5f39d3b-4b8f-454b-8d20-a28be6271a40"),
                            DateOfBirth = new DateTime(1979, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2017, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Frenck",
                            LastName = "Olsen",
                            NickName = "Olsen"
                        });
                });

            modelBuilder.Entity("Internship.Domain.Entity.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Coast")
                        .HasColumnType("decimal")
                        .HasColumnName("Coast");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("date")
                        .HasColumnName("DateOfCreation");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSales");

                    b.Property<string>("OriginalSize")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OriginalSize");

                    b.Property<double>("Raiting")
                        .HasColumnType("float8")
                        .HasColumnName("Raiting");

                    b.HasKey("Id")
                        .HasName("Id1");

                    b.HasIndex("AuthorId");

                    b.ToTable("Photos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60386695-9fed-4807-981c-cb0b0c774b14"),
                            AuthorId = new Guid("14d5363b-0889-4b3d-aaa7-f456d7b0f195"),
                            Coast = 100000m,
                            DateOfCreation = new DateTime(2010, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "en.wikipedia.org/wiki/Sunflowers_(Van_Gogh_series)#/media/File:Vincent_Willem_van_Gogh_127.jpg",
                            Name = "Sunflowers",
                            NumberOfSales = 5,
                            OriginalSize = "100x100",
                            Raiting = 0.0
                        },
                        new
                        {
                            Id = new Guid("8836d2cd-e88f-49fd-afab-f0947982d8d0"),
                            AuthorId = new Guid("f51cccd8-4c11-4c96-aff3-24b1b4922de7"),
                            Coast = 200000m,
                            DateOfCreation = new DateTime(2015, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "en.wikipedia.org/wiki/Isaac_Isra%C3%ABls#/media/File:Isaac_Israels_-_Donkeyride.jpg",
                            Name = "Riding Donkeys on the Beach",
                            NumberOfSales = 10,
                            OriginalSize = "1000x1000",
                            Raiting = 0.0
                        },
                        new
                        {
                            Id = new Guid("28f03a22-537a-4e05-9a7b-d095ac017967"),
                            AuthorId = new Guid("1395039e-c3d8-4afb-811e-6a69ab3245bd"),
                            Coast = 500000m,
                            DateOfCreation = new DateTime(2015, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "en.wikipedia.org/wiki/Portrait_of_a_Wounded_KNIL_Soldier#/media/File:Gewonde_KNIL-militair_door_Isaac_Israels.jpg",
                            Name = "Gewonde KNIL-militair door",
                            NumberOfSales = 2,
                            OriginalSize = "1000x1500",
                            Raiting = 0.0
                        });
                });

            modelBuilder.Entity("Internship.Domain.Entity.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Coast")
                        .HasColumnType("decimal")
                        .HasColumnName("Coast");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("date")
                        .HasColumnName("DateOfCreation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSales");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("Id2");

                    b.HasIndex("AuthorId");

                    b.ToTable("Texts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7fac413-61b1-40a0-a30d-499abcf6582e"),
                            AuthorId = new Guid("ac898bde-ecc6-43c1-8f4b-a0d54dc17d47"),
                            Coast = 10000m,
                            DateOfCreation = new DateTime(2017, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Your Wounds",
                            NumberOfSales = 5,
                            text = "Time doesn’t heal wounds\r\nto make you forget."
                        },
                        new
                        {
                            Id = new Guid("1a6a68be-3643-49d6-b4a0-f04c393323ef"),
                            AuthorId = new Guid("b5f39d3b-4b8f-454b-8d20-a28be6271a40"),
                            Coast = 5000m,
                            DateOfCreation = new DateTime(2020, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Camouflaged",
                            NumberOfSales = 50,
                            text = "In all chaotic beauty lies a wounded work of art.\r\nBeautiful but torn, wreaking havoc on my heart.\r\n\r\nSource: https://www.familyfriendpoems.com/poem/camouflaged"
                        });
                });

            modelBuilder.Entity("Internship.Domain.Entity.Photo", b =>
                {
                    b.HasOne("Internship.Domain.Entity.Author", "Author")
                        .WithMany("Photos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Internship.Domain.Entity.Text", b =>
                {
                    b.HasOne("Internship.Domain.Entity.Author", "Author")
                        .WithMany("Texts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Internship.Domain.Entity.Author", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Texts");
                });
#pragma warning restore 612, 618
        }
    }
}
