// <auto-generated />
using System;
using Internship.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Internship.Migrations
{
    [DbContext(typeof(PhotoStockContext))]
    [Migration("20220926141214_entity")]
    partial class entity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Internship.Domain.Entity.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("timestamp")
                        .HasColumnName("DateOfRegistration");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Internship.Domain.Entity.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Coast")
                        .HasColumnType("decimal")
                        .HasColumnName("Coast");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp")
                        .HasColumnName("DateOfCreation");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSales");

                    b.Property<string>("OriginalSize")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OriginalSize");

                    b.Property<double>("Raiting")
                        .HasColumnType("float8")
                        .HasColumnName("Raiting");

                    b.HasKey("Id")
                        .HasName("Id1");

                    b.HasIndex("AuthorId");

                    b.ToTable("Photos", (string)null);
                });

            modelBuilder.Entity("Internship.Domain.Entity.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Coast")
                        .HasColumnType("decimal")
                        .HasColumnName("Coast");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp")
                        .HasColumnName("DateOfCreation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfSales")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfSales");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("Id2");

                    b.HasIndex("AuthorId");

                    b.ToTable("Texts", (string)null);
                });

            modelBuilder.Entity("Internship.Domain.Entity.Photo", b =>
                {
                    b.HasOne("Internship.Domain.Entity.Author", "Author")
                        .WithMany("Photos")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Internship.Domain.Entity.Text", b =>
                {
                    b.HasOne("Internship.Domain.Entity.Author", "Author")
                        .WithMany("Texts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Internship.Domain.Entity.Author", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Texts");
                });
#pragma warning restore 612, 618
        }
    }
}
